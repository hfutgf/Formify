generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url      = "postgresql://postgres.ogwlrkjxbbsziujjsqvo:hfutgfgit77@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
// }

enum Role {
  USER
  ADMIN
}

enum TypeLikes {
  LIKE
  DISLIKE
}

enum QuestionType {
  TEXT
  MULTICHOICE
  RADIO
}

enum Theme {
  SPORT
  PERSONAL
  WORK
  STUDY
  TRAVEL
  OTHER
  HEALTH
  ENTERTAINMENT
  FINANCE
  EDUCATION
  TECHNOLOGY
  FAMILY
  FITNESS
  MUSIC
}

model Users {
  id           Int            @id @default(autoincrement())
  fullName     String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  templates    Template[]
  forms        Form[]
  comments     Comment[]
  TemplateLike TemplateLike[]
  CommentLike  CommentLike[]

  @@map("users")
}

model Template {
  id           Int            @id @default(autoincrement())
  authorId     Int
  title        String
  description  String?        @db.Text
  theme        Theme
  imageUrl     String?
  isPublic     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  author       Users          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questions    Question[]
  comments     Comment[]
  Form         Form[]
  TemplateLike TemplateLike[]

  @@map("templates")
}

model Question {
  id           Int          @id @default(autoincrement())
  templateId   Int
  questionType QuestionType
  title        String
  description  String?      @db.Text
  order        Int
  isVisible    Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  template     Template     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  answers      Answer[]
  options      Option[]

  @@map("questions")
}

model Form {
  id          Int      @id @default(autoincrement())
  templateId  Int
  authorId    Int
  submittedAt DateTime @default(now())
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  author      Users    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers     Answer[]

  @@map("forms")
}

model Answer {
  id           Int            @id @default(autoincrement())
  formId       Int
  questionId   Int
  answerValue  String?
  form         Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  question     Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  AnswerOption AnswerOption[]

  @@map("answers")
}

model Comment {
  id         Int           @id @default(autoincrement())
  templateId Int
  authorId   Int
  content    String        @db.Text
  createdAt  DateTime      @default(now())
  template   Template      @relation(fields: [templateId], references: [id], onDelete: Cascade)
  author     Users         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes      CommentLike[]

  @@map("comments")
}

model TemplateLike {
  id         Int       @id @default(autoincrement())
  value      TypeLikes
  user       Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  template   Template  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int

  @@unique([userId, templateId])
  @@map("template_likes")
}

model CommentLike {
  id        Int       @id @default(autoincrement())
  value     TypeLikes
  user      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Option {
  id         Int       @id @default(autoincrement())
  questionId Int
  text       String?
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatetAt  DateTime?

  @@map("options")
}

model AnswerOption {
  id       Int    @id @default(autoincrement())
  answerId Int
  option   String
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@map("answer_options")
}
